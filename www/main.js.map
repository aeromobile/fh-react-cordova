{"version":3,"sources":["js/main.js"],"names":["Welcome","$fh","WELCOME_TEXT","App","props","state","message","cloudResponse","handleChange","bind","handleSubmit","event","setState","target","value","self","cloud","path","data","hello","res","msg","errorCode","alert","Component","ReactDOM","render","document","getElementById"],"mappings":";;;;AAAA;;;;AACA;;;;AACA;;IAAYA,O;;AACZ;;IAAYC,G;;;;;;;;;;;;AAEZ,IAAMC,iIAAN;;IAKMC,G;;;AACJ,eAAYC,KAAZ,EAAmB;AAAA;;AAGjB;AAHiB,0GACXA,KADW;;AAIjB,UAAKC,KAAL,GAAa;AACXC,eAAS,EADE;AAEXC,qBAAe;AAFJ,KAAb;;AAKA;AACA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,OAApB;AACA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBD,IAAlB,OAApB;AAXiB;AAYlB;;AAED;;;;;iCACaE,K,EAAO;AAClB,WAAKC,QAAL,CAAc;AACZN,iBAASK,MAAME,MAAN,CAAaC,KADV;AAEZP,uBAAe,KAAKF,KAAL,CAAWE;AAFd,OAAd;AAID;;AAED;;;;mCACe;AACb,UAAIQ,OAAO,IAAX;;AAEAd,UAAIe,KAAJ,CAAU;AACNC,cAAM,OADA;AAENC,cAAM;AACJC,iBAAOJ,KAAKV,KAAL,CAAWC;AADd;AAFA,OAAV,EAME,UAAUc,GAAV,EAAe;AACb;AACAL,aAAKH,QAAL,CAAc;AACZN,mBAAS,EADG;AAEZC,yBAAea,IAAIC;AAFP,SAAd;AAID,OAZH,EAaE,UAAUC,SAAV,EAAqB;AACnBC,sCAA4BD,SAA5B;AACD,OAfH;AAiBD;;AAED;;;;6BACS;AACP,aACE;AAAA;AAAA;AACE,sCAAC,OAAD,IAAS,MAAMpB,YAAf,GADF;AAEE;AACE,qBAAU,YADZ;AAEE,gBAAK,MAFP;AAGE,iBAAO,KAAKG,KAAL,CAAWC,OAHpB;AAIE,oBAAU,KAAKE,YAJjB;AAKE,uBAAY;AALd,UAFF;AASE;AAAA;AAAA,YAAQ,WAAU,kBAAlB,EAAqC,SAAS,KAAKE,YAAnD;AAAA;AAAA,SATF;AAUE;AAAA;AAAA;AAAI,eAAKL,KAAL,CAAWE;AAAf;AAVF,OADF;AAcD;;;;EA9De,gBAAMiB,S;;AAiExBC,SAASC,MAAT,CAAgB,8BAAC,GAAD,OAAhB,EAAyBC,SAASC,cAAT,CAAwB,KAAxB,CAAzB","file":"main.js","sourcesContent":["import React from 'react'\nimport ReactDom from 'react-dom'\nimport * as Welcome from './components/welcome'\nimport * as $fh from 'fh-js-sdk'\n\nconst WELCOME_TEXT = `\n  This is a basic React App that can take in your name, \n  send it to a cloud app and display the response.\n`;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Set initial state\n    this.state = {\n      message: \"\",\n      cloudResponse: \"\"\n    };\n\n    // Those bindings are required to make `this` work in the callbacks\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  // This method is called when the input field fires the `onChange` event\n  handleChange(event) {\n    this.setState({\n      message: event.target.value,\n      cloudResponse: this.state.cloudResponse\n    });\n  }\n\n  // This method is called when the `Submit` button is pressed\n  handleSubmit() {\n    var self = this;\n\n    $fh.cloud({\n        path: 'hello',\n        data: {\n          hello: self.state.message\n        },\n      },\n      function (res) {\n        // Update the component state. This will trigger also update the view\n        self.setState({\n          message: \"\",\n          cloudResponse: res.msg\n        });\n      },\n      function (errorCode) {\n        alert(`An error with code ${errorCode} occurred`);\n      }\n    );\n  }\n\n  // The `render` method is the\n  render() {\n    return (\n      <div>\n        <Welcome text={WELCOME_TEXT} />\n        <input\n          className=\"input-text\"\n          type=\"text\"\n          value={this.state.message}\n          onChange={this.handleChange}\n          placeholder=\"Input your Name\"\n        />\n        <button className=\"say-hello-button\" onClick={this.handleSubmit}>Submit</button>\n        <p>{this.state.cloudResponse}</p>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<App />, document.getElementById(\"app\"));\n"]}